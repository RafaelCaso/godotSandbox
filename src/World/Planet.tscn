[gd_scene load_steps=9 format=2]

[ext_resource path="res://Assets/Sprites/StellarBodies/0035EarthRect.png" type="Texture" id=1]
[ext_resource path="res://src/World/Planet.gd" type="Script" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float aspect_ratio = 3.0;
uniform float rotation_speed = 0.01;
uniform bool as_shadow = false;
uniform float PI = 3.14159265359;

void fragment(){
	float px = 2.0 * (UV.x - 0.5);
	float py = 2.0 * (UV.y - 0.5);
	
	if(px * px + py * py > 1.0) {
		COLOR.a = 0.0;
	} else {
		px = asin(px / sqrt(1.0 - py * py)) * 3.0 / PI;
		py = asin(py) * 2.0 / PI;
		
		COLOR = texture(TEXTURE, vec2(
			0.5 * (px + 1.0) / aspect_ratio - TIME * rotation_speed,
			0.5 * (py + 1.0)));
			
			if(as_shadow) {
				COLOR.rgb = vec3(0.0, 0.0, 0.0);
				COLOR.a *= 0.9;
			}
	}
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/aspect_ratio = 3.0
shader_param/rotation_speed = 0.01
shader_param/as_shadow = false
shader_param/PI = 3.14159

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform vec4 color_signal : hint_color = vec4 (1.0);
uniform float size : hint_range(0.0, 1.0, 0.01) = 0.2;
uniform float zoom : hint_range(0.0, 20, 1) = 8.0;
uniform float speed : hint_range(-10.0, 10.0, 1.0) = 1.0;

void fragment(){

	float d = length((UV-0.5)*2.0);
	float t = pow(smoothstep(0.9,0.2,d),0.35);

	// For rainbow effect, keep this line :
	vec3 rainbow = 0.5 + 0.5*cos(TIME+UV.xyx+vec3(0,2,4));
	vec4 color = vec4(rainbow.rgb,1.0);

	// For idle color, delete \"//\" below :
	//color = vec4(color_signal.rgb,1.0);

	d = sin(zoom*d - speed*TIME);
	d = abs(d);
	d = size/d;
	color *= d*t;

	COLOR = vec4(color);
}

//shader_type canvas_item;
//
//uniform float ring_radius : hint_range(0.1, 0.5, 0.01) = 0.4;
//uniform float thickness_scalar : hint_range(0.0, 0.99, 0.05) = 0.7;
//uniform float oscillation_scalar : hint_range(0.0, 0.25, 0.005) = 0.025;
//uniform float speed : hint_range(0.0, 50.0, 0.1) = 1.0;
//uniform vec4 main_color : hint_color = vec4(1.0,1.0,1.0,1.0);
//uniform vec4 lerp_color : hint_color = vec4(1.0,1.0,1.0,1.0);
//
//float range_lerp(float value, float min1, float min2, float max1, float max2){
//	return min2 + (max2 - min2) * ((value - min1) / (max1 - min1));
//}
//
//void fragment() {
//	// Calculate the distance between the current pixel and the center of the unit
//	float dist = distance(UV, vec2(0.5, 0.5));
//
//	// Add a slight oscillation to the size of the ring
//	float o = cos(TIME * speed);
//	float ring_size = ring_radius + o * oscillation_scalar;
//
//	float inner_hardness = 0.0;
//	// Solve for ring alpha channel
//	float alpha = step(dist, ring_size) * smoothstep(ring_size * (1.0 - thickness_scalar), ring_size, dist);
//
//	// Solve w mix amount for optional color lerping
//	float w = range_lerp(o, -1.0, 1.0, 1.0, 0.0);
//
//	// Output the final color
//	COLOR = vec4(mix(main_color.rgb, lerp_color.rgb, w), alpha );
//}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/color_signal = Color( 1, 1, 1, 1 )
shader_param/size = 0.2
shader_param/zoom = 8.0
shader_param/speed = 1.0

[sub_resource type="CapsuleShape2D" id=5]
radius = 161.0
height = 44.0004

[sub_resource type="CircleShape2D" id=6]

[node name="Planet" type="Node2D"]
light_mask = 0
script = ExtResource( 2 )

[node name="PlanetSprite" type="Sprite" parent="."]
self_modulate = Color( 1, 1.2, 1.2, 1 )
material = SubResource( 2 )
position = Vector2( -0.500003, 31 )
scale = Vector2( 0.712891, 1.24219 )
texture = ExtResource( 1 )

[node name="ColorRect" type="ColorRect" parent="."]
visible = false
material = SubResource( 4 )
margin_left = -338.0
margin_top = -258.0
margin_right = 339.0
margin_bottom = 325.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Area2D" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
position = Vector2( -2, 32 )
rotation = 1.5708
shape = SubResource( 5 )

[node name="ColorRectTimer" type="Timer" parent="."]
wait_time = 2.0
one_shot = true

[node name="KinematicBody2D" type="KinematicBody2D" parent="." groups=["planet"]]
collision_layer = 256
collision_mask = 0

[node name="CollisionShape2D" type="CollisionShape2D" parent="KinematicBody2D"]
shape = SubResource( 6 )

[connection signal="mouse_entered" from="Area2D" to="." method="_on_Area2D_mouse_entered"]
[connection signal="mouse_exited" from="Area2D" to="." method="_on_Area2D_mouse_exited"]
